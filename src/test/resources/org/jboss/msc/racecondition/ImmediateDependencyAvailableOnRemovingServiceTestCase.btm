#
# JBoss, Home of Professional Open Source.
# Copyright 2012, Red Hat, Inc., and individual contributors
# as indicated by the @author tags. See the copyright.txt file in the
# distribution for a full listing of individual contributors.
#
# This is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this software; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
#
RULE before ServiceControllerImpl.immediateDependencyAvailable
CLASS org.jboss.msc.service.ServiceControllerImpl
METHOD immediateDependencyAvailable
AT ENTRY
BIND serviceName = $0.primaryRegistration.name.getSimpleName();
IF serviceName.equals("B") AND incrementCounter("run once before ServiceControllerImpl.immediateDependencyAvailable") == 1
DO
   debug("wait for service enter REMOVING state: " + $0),
   waitFor("service REMOVING"),
   debug("proceed with immediateDependencyAvailable")
ENDRULE

RULE after ServiceControllerImpl.immediateDependencyAvailable
CLASS org.jboss.msc.service.ServiceControllerImpl
METHOD immediateDependencyAvailable
AT EXIT
BIND serviceName = $0.primaryRegistration.name.getSimpleName();
IF serviceName.equals("B") AND incrementCounter("run once after ServiceControllerImpl.immediateDependencyAvailable") == 1
DO
   debug("finished immediateDependencyAvailable on service " + $0),
   signalWake("immediateDependencyAvailable notified", true)
ENDRULE

RULE service B REMOVING
CLASS org.jboss.msc.service.ServiceControllerImpl
METHOD doExecute
AT ENTRY
BIND serviceName = $0.primaryRegistration.name.getSimpleName()
IF $0.state.toString().equals("REMOVING") AND serviceName.equals("B") AND incrementCounter("run once service B REMOVING") == 1
DO
    debug("signaling immediateDependencyAvailable" + $0),
    signalWake("service REMOVING", true),
    waitFor("immediateDependencyAvailable notified"),
    debug("signaled immediateDependencyAvailable")
ENDRULE

RULE prevent deadlock with UndemandDependenciesTask - I
CLASS org.jboss.msc.service.ServiceRegistrationImpl
METHOD removeDemand
AT EXIT
IF $0.name.getSimpleName().equals("C")  AND incrementCounter("run once prevent deadlock I") == 1
DO
   debug("unlocking C install thread"),
   signalWake("service C undemanded", true)
ENDRULE

RULE prevent deadlock with UndemandDependenciesTask - II
CLASS org.jboss.msc.racecondition.ImmediateDependencyAvailableDuringServiceRemovalTest$InstallService
METHOD run
AT ENTRY
IF incrementCounter("run once prevent deadlock II") == 1
DO
   debug("waiting for service c to be undemanded before proceeding with service C installation - to avoid a deadlock"),
   waitFor("service C undemanded")
ENDRULE

RULE clear counters and flags
CLASS org.jboss.msc.service.AbstractServiceTest
METHOD tearDown
AT EXIT
IF TRUE
DO
    debug("clearing counters and flags"),
    deleteCounter("run once before ServiceControllerImpl.immediateDependencyAvailable"),
    deleteCounter("run once after ServiceControllerImpl.immediateDependencyAvailable"),
    deleteCounter("run once service B REMOVING"),
    deleteCounter("run once prevent deadlock I"),
    deleteCounter("run once prevent deadlock II")
ENDRULE