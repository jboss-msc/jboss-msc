#
# JBoss, Home of Professional Open Source.
# Copyright 2012, Red Hat, Inc., and individual contributors
# as indicated by the @author tags. See the copyright.txt file in the
# distribution for a full listing of individual contributors.
#
# This is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this software; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
#
RULE service D on REMOVE mode
CLASS org.jboss.msc.service.ServiceControllerImpl
METHOD setMode
AT ENTRY
BIND serviceName = $0.primaryRegistration.name.getSimpleName();
IF serviceName.equals("D") AND $1.toString().equals("REMOVE")
DO
    debug("flagging service D on REMOVE mode"),
    flag("service D on REMOVE mode")
ENDRULE

RULE before ServiceControllerImpl.transitiveDependencyUnavailable
CLASS org.jboss.msc.service.ServiceControllerImpl
METHOD transitiveDependencyUnavailable
AT ENTRY
BIND serviceName = $0.primaryRegistration.name.getSimpleName();
IF flagged("service D on REMOVE mode") AND serviceName.equals("B") AND incrementCounter("run once before ServiceControllerImpl.transitiveDependencyUnavailable") == 1
DO
   debug("wait for service enter REMOVING state: " + $0),
   waitFor("service REMOVING", 10000),
   debug("wait for service enter REMOVED state: " + $0),
   waitFor("service REMOVED", 10000),
   debug("proceed with transitiveDependencyUnavailable")
ENDRULE

RULE service B REMOVING
CLASS org.jboss.msc.service.ServiceControllerImpl
METHOD doExecute
AT ENTRY
BIND serviceName = $0.primaryRegistration.name.getSimpleName()
IF flagged("service D on REMOVE mode") AND $0.state.toString().equals("REMOVING") AND serviceName.equals("B") AND incrementCounter("run once service B REMOVING") == 1
DO
    debug("signaling transitiveDependencyUnavailable " + $0),
    signalWake("service REMOVING", true),
    debug("signaled transitiveDependencyUnavailable")
ENDRULE

RULE service B REMOVED
CLASS org.jboss.msc.service.ServiceControllerImpl
METHOD doExecute
AT ENTRY
BIND serviceName = $0.primaryRegistration.name.getSimpleName()
IF flagged("service D on REMOVE mode") AND $0.state.toString().equals("REMOVED") AND serviceName.equals("B") AND incrementCounter("run once service B REMOVED") == 1
DO
    debug("signaling transitiveDependencyUnavailable " + $0),
    signalWake("service REMOVED", true),
    debug("signaled transitiveDependencyUnavailable")
ENDRULE

RULE prevent deadlock with UndemandDependenciesTask - I
CLASS org.jboss.msc.service.ServiceRegistrationImpl
METHOD removeDemand
AT EXIT
IF flagged("service D on REMOVE mode") AND $0.name.getSimpleName().equals("C") AND incrementCounter("run once prevent deadlock I") == 1
DO
   debug("unlocking C.immediateDepedencyUnavailable thread"),
   flag("service C undemanded"),
   signalWake("service C undemanded")
ENDRULE

RULE prevent deadlock with UndemandDependenciesTask - II
CLASS org.jboss.msc.service.ServiceControllerImpl
METHOD immediateDependencyUnavailable
AT ENTRY
IF !flagged ("service C undemanded") AND flagged("service D on REMOVE mode") AND $0.primaryRegistration.name.getSimpleName().equals("C") AND incrementCounter("run once prevent deadlock II") == 1
DO
   debug("waiting for service c to be undemanded before proceeding with service C immediateDependencyUnavailable - to avoid a deadlock"),
   waitFor("service C undemanded", 1000)
ENDRULE

RULE clear counters and flags
CLASS org.jboss.msc.service.AbstractServiceTest
METHOD tearDown
AT EXIT
IF TRUE
DO
    debug("clearing counters and flags"),
    clear("service D on REMOVE mode"),
    clear("service C undemanded"),
    deleteCounter("run once before ServiceControllerImpl.transitiveDependencyUnavailable"),
    deleteCounter("run once service B REMOVING"),
    deleteCounter("run once service B REMOVED"),
    deleteCounter("run once prevent deadlock I"),
    deleteCounter("run once prevent deadlock II")
ENDRULE